@*
The idea behind the project is a ToDo-web server app that allows a single account
to track and maintain a number of different Todo-items, assigned to a number of different sub-users.
I.e. a "family account" where family member 1, 2 and 3, can each have their own ToDo items, where:
- Name is only viewable by the member in question (due to cryptographically salted encryption)
- Status is viewable by all members
- One user (test@test.dk) can thus have ToDo items for Member A, B and C
- But only when the CPR for Member A is applied, will ToDo items deobfuscate. ToDo items for B and C will remain obfuscated.

    Example of Encryptions:
        - Symmetrical:
            - Todo Name (custom)
            - Todo Status (Protector)
        - Asymmetrical:
            - CPR Address
    
    Example of Hashing:
        - CPR Number

    Environment Security:
        - DataProtection library Public and Private key are granted permanency via storage in local files ("private_key.xml", "public_key.xml").

    Todo Name:
    The "name" is salted prior to AES encryption, using a key generated cryptographically via:
        Caesar Cipher:
            Rotation: The last 4 digits of CPR number
            Text: Username (e.g. "test@test.dk")
            Bounded to AES compatible characters to avoid conflicts when encrypting.
            => Username: "sdrs?sdrs-cj"
    This is reversed during decryption
    => thus obfuscating information if the last 4 digits of the CPR are incongruent.

    Todo Status:
    Uses the AspNetCore DataProtection library to encrypt symmetrically, decrypts directly in view.

    CPR Address:
    same as above, but asymmetrically; decrypted during Initialization.

    CPR Number:
    Hashed using Username + rotation cryptography by last 4 digits.
    In addition, the uniqueness of CPR is verified by:
        1. Searching Database for the last 4 digits
        2. Applying caesar cipher on that entry's Username using the integer value of the 4 digits.
        3. Applying the resulting rotated string as salt
        4. Hashing the "new" CPR number with that salt
        5. Comparing wether the result of hashing the new CPR number with the salt derived from the found entrys salt.
    Note that on first hit, the loop exits, as we only need 1 match.
*@
@page "/"
@using Microsoft.AspNetCore.Authorization;
@using System.Security.Claims;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@using System.Security.Cryptography
@using System.Text
@using TodoApp.Models;
@using TodoApp.Code;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Models.TodoDbContext _todoDbContext;
@inject EncryptionHandler _encryptionHandler;
@attribute [Authorize(Policy = "AuthenticatedUser")]

<PageTitle>Home</PageTitle>

<h2>Welcome @Username</h2>

<AuthorizeView>
    <Authorized>
        @if (!HasCPR)
        {
            <div>
                <label>Enter CPR:</label>
                <input type="text" id="cprCreate" @bind="CprNumber" />
            </div>
            <div>
                <label>Enter Address:</label>
                <input type="text" id="addCreate" @bind="Address"/>
            </div>
            <button @onclick="AddCPRAsync">Submit</button>
            <p hidden=@IsFormatCorrect>CPR format is incorrect!</p>
            <p hidden=@IsUniqueCPR>CPR already in use!</p>
        }
        else
        {
            <div>
                <label>Your CPR number is:</label>
                <p>@CprNumber</p>
            </div>
            <div>
                <label>Your address is:</label>
                <p>@Address</p>
            </div>
            <div>
                <button @onclick="DeleteCPRAsync">Delete CPR</button>
                <button @onclick="ChangeCPR">Change Member</button>
            </div>
            <br/>
            <br/>
            <div>
                <h4>Todo-List:</h4>

                @foreach (var item in TodoItems)
                {
                    <div class="row mb-3" style="margin:5px">
                        <div class="col-md-2" style="background-color:lightgray;padding:5px">
                            <span>@if (HashCPR == @item.Checksum) 
                                {
                                    @DecryptItemName(@item.Name)
                                }
                                else
                                {   
                                    <p>*OBFUSCATED*</p>
                                }
                            </span>
                        </div>
                        <div class="col-md-2" style="padding:5px">
                            @if (item.Status != null) @_encryptionHandler.ProtectorDecrypt(@item.Status)
                        </div>
                        <div class="col-md-2" style="background-color:lightgray;padding:5px">
                            <input type="text" @bind="Status" />
                        </div>
                        <div class="col-md-2" style="padding:5px">
                            <button class="btn btn-info ml-2" @onclick="() => UpdateStatusAsync(item)">Update Status</button>
                        </div>
                        <div class="col-md-2" style="background-color:lightgray;padding:5px">
                            <button class="btn btn-danger ml-2" @onclick="() => DeleteTodoAsync(item)">Delete</button>
                        </div>
                    </div>
                }
            </div>
            <div>
                <label>Add Todo:</label>
                <input type="text" id="todoCreate" @bind="TodoName"/>
                <button @onclick="AddTodoAsync">Add</button>
            </div>
        }
        <p style="color:gray">@HashCPR</p>

    </Authorized>
</AuthorizeView>

@code {
    public string? Username { get; set; }
    public string? CprNumber { get; set; }
    public string? Address { get; set; }
    public string? HashCPR { get; set; }
    public string? TodoName { get; set; }
    public string? Status { get; set; }
    public bool HasCPR { get; set; }
    public bool IsFormatCorrect { get; set; } = true;
    public bool IsUniqueCPR { get; set; } = true;

    public List<TodoItem> TodoItems { get; set; } = new List<TodoItem>();


    /********************************************/
    /***************** INIT *********************/
    /********************************************/
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        Username = user.Identity.Name;


        // Verify user is logged in before checking whether they have a CPR submitted or not.
        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userCPR = await _todoDbContext.Cprs.FirstOrDefaultAsync(c => c.User == Username);
            CprNumber = userCPR != null ? "******-" + userCPR.CprEnding : null;
            Address = userCPR != null && userCPR.Address != null ? _encryptionHandler.ProtectorDecryptAsym(userCPR.Address) : null;
            HasCPR = await CheckUserCPRAsync(Username);
            await GetTodoItemsAsync();
        }

    }

    /********************************************/
    /****************  CRUD  ********************/
    /********************************************/

    /// <summary>
    /// Updates the status for the item in question. Note we clear the field afterward, as all TodoItems have the "Status" field
    /// But when the function is called, it only uses the specific TodoItem object, thus avoiding confounding changes.
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public async Task UpdateStatusAsync(TodoItem item)
    {
        item.Status = _encryptionHandler.ProtectorEncrypt(Status);
        _todoDbContext.TodoItems.Update(item);
        await _todoDbContext.SaveChangesAsync();
        Status = null;

    }

    /// <summary>
    /// Deletes a given Todo Item from the list the user can see.
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public async Task DeleteTodoAsync(TodoItem item)
    {
        _todoDbContext.TodoItems.Remove(item);
        await _todoDbContext.SaveChangesAsync();
        TodoItems.Remove(item);
    }

    /// <summary>
    /// Checks if the current list in DB is equivalent to the list of items shown on the page
    /// If so, proceeds to encrypt the todo item name (description), using a helper method in EncryptItemName
    /// and stores the result in DB.
    /// </summary>
    /// <returns></returns>
    public async Task AddTodoAsync()
    {
        HashSet<int> hashSet2 = new HashSet<int>(TodoItems.Select(item => item.GetHashCode()));
        var todoListTemp = _todoDbContext.TodoItems.ToList();
        todoListTemp = todoListTemp.Where(x => x.User == Username).ToList();

        HashSet<int> hashSet1 = new HashSet<int>(todoListTemp.Select(item => item.GetHashCode()));

        bool areListEqual = hashSet1.SetEquals(hashSet2);
        if (areListEqual)
        {
            var desc = EncryptItemName(TodoName);
            var newTodo = new TodoItem { User = Username, Name = desc, Checksum = HashCPR };

            _todoDbContext.TodoItems.Add(newTodo);
            await _todoDbContext.SaveChangesAsync();
            await GetTodoItemsAsync();
        }

    }

    /// <summary>
    /// Deletes the CPR and clears flags
    /// </summary>
    /// <returns></returns>
    public async Task DeleteCPRAsync()
    {
        var userCPR = await _todoDbContext.Cprs.FirstOrDefaultAsync(c => c.User == Username);
        _todoDbContext.Cprs.Remove(userCPR);
        _todoDbContext.SaveChanges();
        HasCPR = false;
        HashCPR = null;
        CprNumber = null;
        Address = null;

    }

    /// <summary>
    /// Here we exploit the flags in order to enable changing between CPRs for the user account.
    /// </summary>
    public void ChangeCPR()
    {
        HasCPR = false;
        HashCPR = null;
        CprNumber = null;
        Address = null;
    }

    /// <summary>
    /// Validates CPR is in the correct format
    /// if so, uses the Username and a rotation cipher based on the last 4 CPR digits
    /// and uses this as salt
    /// Displays a semi-obfuscated version of the applied CPR; revealing the applicable data.
    /// </summary>
    public async Task AddCPRAsync()
    {
        // Ensure CPR format is correct
        if (!(!string.IsNullOrEmpty(CprNumber) && CprNumber.Contains("-") && CprNumber.Length == 11 && CprNumber.Split("-")[0].Length == 6 && CprNumber.Split("-")[1].Length == 4))
        {
            IsFormatCorrect = false;
            return;
        }
        else
        {
            IsFormatCorrect = true;

            var cpr_ending = CprNumber.Split("-")[1];
            var salt = HashingExamples.RotateString(Username, Convert.ToInt16(cpr_ending));
            string hashedCPR = HashingExamples.PBKHash(CprNumber, salt);

            // Check CPR isn't in use by another account.
            var other_endings = _todoDbContext.Cprs.Where(x => x.CprEnding == cpr_ending && x.User != Username);

            // We skip the if-else statement(s) here, seeing as if there were no results
            // the iteration would simply not run.
            // if there were, and a match is found, the function returns, avoiding checking for
            // same CPR on same Account, and/or creating new CPR on same account.
            foreach (var item in other_endings)
            {
                var other_salt = HashingExamples.RotateString(item.User, Convert.ToInt16(cpr_ending));
                string other_hashedCPR = HashingExamples.PBKHash(CprNumber, other_salt);
                if (other_hashedCPR == item.Cpr1) 
                {
                    IsUniqueCPR = false;
                    return;
                }

            }


            // Avoid duplicates for the same account:
            var self_endings = _todoDbContext.Cprs.Where(x => x.CprEnding == cpr_ending && x.User == Username);

            foreach (var item in self_endings)
            {
                var other_salt = HashingExamples.RotateString(item.User, Convert.ToInt16(cpr_ending));
                string other_hashedCPR = HashingExamples.PBKHash(CprNumber, other_salt);
                if (other_hashedCPR == item.Cpr1)
                {
                    // Check if a new Address was supplied.
                    item.Address = Address != null ? _encryptionHandler.ProtectorEncryptAsym(Address) : null; CprNumber = "******-" + cpr_ending;
                    _todoDbContext.Cprs.Update(item);
                    _todoDbContext.SaveChanges();
                    HashCPR = hashedCPR;
                    HasCPR = true;
                    IsUniqueCPR = true;
                    return;
                }

            }

            // Asymmetric encryption of Address:
            var encrypted_address = Address != null ? _encryptionHandler.ProtectorEncryptAsym(Address) : null;
            var userCPR = new Cpr { Cpr1 = hashedCPR, CprEnding = cpr_ending, Address = encrypted_address, User = Username };

            _todoDbContext.Cprs.Add(userCPR);
            await _todoDbContext.SaveChangesAsync();
            CprNumber = "******-" + cpr_ending;
            HashCPR = hashedCPR;
            HasCPR = true;
            IsUniqueCPR = true;
            

        }
    }

    /// <summary>
    /// Helper method for checking if User has a CPR
    /// </summary>
    /// <param name="userId"></param>
    /// <returns></returns>
    private async Task<bool> CheckUserCPRAsync(string userId)
    {
        var userCPR = await _todoDbContext.Cprs.FirstOrDefaultAsync(c => c.User == userId);
        return userCPR != null;
    }

    /********************************************/
    /***************** HELPERS ******************/
    /********************************************/
    /// <summary>
    /// Helper method for fetching TodoItems from the DB
    /// </summary>
    /// <returns></returns>
    private async Task GetTodoItemsAsync()
    {
        TodoItems = await _todoDbContext.TodoItems
                .Where(item => item.User == Username)
                .ToListAsync();
    }

    /// <summary>
    /// Helper method for Decrypting a Todo Items name
    /// The method itself computes the key based on the users name and submitted CPR (last 4 digits)
    /// </summary>
    /// <param name="encryptedText"></param>
    /// <returns>Encrypted string</returns>
    private string DecryptItemName(string encryptedText)
    {
        if (!string.IsNullOrEmpty(CprNumber) && CprNumber.Contains("-"))
        {
            
            var cpr_ending = CprNumber.Split("-")[1];
            var key = HashingExamples.RotateString(Username, Convert.ToInt16(cpr_ending));
            return EncryptionExamples.Decrypt(encryptedText, key);
        }
        else
        {
            return encryptedText;
        }
        

    }

    /// <summary>
    /// Helper method for Encrypting Todo Item name
    /// The method uses the final 4 digits of the users submitted CPR number, and rotates the Username by that number.
    /// </summary>
    /// <param name="plainText"></param>
    /// <returns></returns>
    private string EncryptItemName(string plainText)
    {
        if (!string.IsNullOrEmpty(CprNumber) && CprNumber.Contains("-"))
        {
            
            var cpr_ending = CprNumber.Split("-")[1];
            var key = HashingExamples.RotateString(Username, Convert.ToInt16(cpr_ending));
            return EncryptionExamples.Encrypt(plainText, key);
        }
        else
        {
            return null;
        }
    }




}